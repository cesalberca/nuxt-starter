# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
name: "webapp"

# https://hub.docker.com/_/traefik
x-traefik-image: &traefik-image "docker.io/traefik:3.0"
# https://github.com/goauthentik/authentik/pkgs/container/server
x-authentik-image: &authentik-image "ghcr.io/goauthentik/server:2024.4"
# https://hub.docker.com/_/postgres
x-postgres-image: &postgres-image "docker.io/postgres:16-bookworm"
# https://hub.docker.com/_/redis
x-redis-image: &redis-image "docker.io/redis:7-bookworm"

services:
  traefik:
    image: *traefik-image
    restart: "always"
    networks:
      - "public"
      - "private"
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
      - "443:443/udp"
      - "127.0.0.1:5432:5432/tcp"
      - "127.0.0.1:6379:6379/tcp"
      - "127.0.0.1:8080:8080/tcp"
    volumes:
      - { type: "bind", source: "/var/run/docker.sock", target: "/var/run/docker.sock", read_only: true }
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--api.disableDashboardAd=true"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80/tcp"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443/tcp"
      - "--entrypoints.websecure.http3.advertisedPort=443"
      - "--entrypoints.postgres.address=:5432/tcp"
      - "--entrypoints.redis.address=:6379/tcp"
      - "--ping=true"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      start_period: "60s"
      interval: "10s"
      timeout: "10s"
      retries: 2

  webapp:
    profiles: ["production"]
    image: "localhost/webapp:latest"
    build:
      context: "./"
      dockerfile: "./Dockerfile"
    labels:
      traefik.enable: "true"
      traefik.http.routers.webapp.rule: "Host(`webapp.localhost`)"
      traefik.http.routers.webapp.entryPoints: "websecure"
      traefik.http.routers.webapp.tls: "true"
      traefik.http.routers.webapp.service: "webapp@docker"
      traefik.http.routers.webapp.middlewares: "compress@docker"
      traefik.http.services.webapp.loadBalancer.server.port: "3000"
      traefik.http.middlewares.compress.compress.includedContentTypes: >-
        application/json,
        application/wasm,
        application/xml,
        image/svg+xml,
        text/css,
        text/html,
        text/javascript,
        text/plain
    restart: "always"
    read_only: true
    networks:
      - "private"
    volumes:
      - { type: "tmpfs", target: "/run/" }
      - { type: "tmpfs", target: "/tmp/" }
    environment:
      PRISMA_DATABASE_URL: "postgresql://webapp:password@postgres:5432/webapp"
      PRISMA_SHADOW_DATABASE_URL: "postgresql://webapp:password@postgres:5432/webapp_shadow"
      NUXT_AUTH_OIDC_ROOT_URL: "https://webapp.localhost"
      NUXT_AUTH_OIDC_CLIENT_ID: "webapp"
      NUXT_AUTH_OIDC_CLIENT_SECRET: "ourclientbythesewordsguarded"
      NUXT_AUTH_OIDC_ISSUER: "http://authentik-server:9000/application/o/webapp/"
      NUXT_AUTH_OIDC_AUTHORIZATION_ENDPOINT: "https://idp.localhost/application/o/authorize/"
      NUXT_AUTH_OIDC_TOKEN_ENDPOINT: "http://authentik-server:9000/application/o/token/"
      NUXT_AUTH_OIDC_USER_INFO_ENDPOINT: "http://authentik-server:9000/application/o/userinfo/"
      NUXT_AUTH_OIDC_END_SESSION_ENDPOINT: "https://idp.localhost/application/o/webapp/end-session/"
      NUXT_AUTH_OIDC_JWKS_URI: "http://authentik-server:9000/application/o/webapp/jwks/"
      NUXT_AUTH_OIDC_SCOPES: "openid email profile"
      NUXT_AUTH_OIDC_ROLE_ATTRIBUTE_PATH: >-
        contains(groups[*], 'authentik Admins') && 'admin' ||
        contains(groups[*], 'editor') && 'editor' ||
        'viewer'
      NUXT_LOG_LEVEL: "debug"
    depends_on:
      authentik-server:
        condition: "service_healthy"
      postgres:
        condition: "service_healthy"

  authentik-server: &authentik-spec
    image: *authentik-image
    labels:
      traefik.enable: "true"
      traefik.http.routers.authentik.rule: "Host(`idp.localhost`)"
      traefik.http.routers.authentik.entryPoints: "websecure"
      traefik.http.routers.authentik.tls: "true"
      traefik.http.routers.authentik.service: "authentik@docker"
      traefik.http.services.authentik.loadBalancer.server.port: "9000"
    restart: "always"
    networks:
      - "private"
    environment:
      AUTHENTIK_BOOTSTRAP_EMAIL: "admin@webapp.localhost"
      AUTHENTIK_BOOTSTRAP_PASSWORD: "password"
      AUTHENTIK_BOOTSTRAP_TOKEN: "H4!b5at+kWls-8yh4Guq"
      AUTHENTIK_SECRET_KEY: "ourclientbythesewordsguarded"
      AUTHENTIK_POSTGRESQL__HOST: "postgres"
      AUTHENTIK_POSTGRESQL__PORT: "5432"
      AUTHENTIK_POSTGRESQL__NAME: "authentik"
      AUTHENTIK_POSTGRESQL__USER: "authentik"
      AUTHENTIK_POSTGRESQL__PASSWORD: "password"
      AUTHENTIK_REDIS__HOST: "redis"
      AUTHENTIK_REDIS__PORT: "6379"
      AUTHENTIK_REDIS__PASSWORD: "password"
      AUTHENTIK_REDIS__DB: "1"
      AUTHENTIK_DISABLE_UPDATE_CHECK: "true"
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_DISABLE_STARTUP_ANALYTICS: "true"
      AUTHENTIK_AVATARS: "initials"
    configs:
      - source: "authentik-setup.yaml"
        target: "/blueprints/custom/setup.yaml"
    command: ["server"]
    healthcheck:
      test: ["CMD", "ak", "healthcheck"]
      start_period: "120s"
      interval: "10s"
      timeout: "10s"
      retries: 2
    depends_on:
      postgres:
        condition: "service_healthy"
      redis:
        condition: "service_healthy"

  authentik-worker:
    <<: *authentik-spec
    labels: {}
    command: ["worker"]

  postgres:
    image: *postgres-image
    labels:
      traefik.enable: "true"
      traefik.tcp.routers.postgres.rule: "HostSNI(`*`)"
      traefik.tcp.routers.postgres.entryPoints: "postgres"
      traefik.tcp.routers.postgres.service: "postgres@docker"
      traefik.tcp.services.postgres.loadBalancer.server.port: "5432"
    restart: "always"
    networks:
      - "private"
    volumes:
      - { type: "volume", source: "postgres-data", target: "/var/lib/postgresql/data/" }
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
    configs:
      - source: "postgres-webapp.sql"
        target: "/docker-entrypoint-initdb.d/webapp.sql"
      - source: "postgres-authentik.sql"
        target: "/docker-entrypoint-initdb.d/authentik.sql"
    healthcheck:
      test: ["CMD", "pg_isready", "-qU", "postgres"]
      start_period: "60s"
      interval: "10s"
      timeout: "10s"
      retries: 2

  redis:
    image: *redis-image
    labels:
      traefik.enable: "true"
      traefik.tcp.routers.redis.rule: "HostSNI(`*`)"
      traefik.tcp.routers.redis.entryPoints: "redis"
      traefik.tcp.routers.redis.service: "redis@docker"
      traefik.tcp.services.redis.loadBalancer.server.port: "6379"
    restart: "always"
    networks:
      - "private"
    volumes:
      - { type: "volume", source: "redis-data", target: "/data/" }
    environment:
      REDISCLI_AUTH: "password"
    configs:
      - source: "redis-redis.conf"
        target: "/etc/redis/redis.conf"
    command: ["redis-server", "/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep -q PONG"]
      start_period: "60s"
      interval: "10s"
      timeout: "10s"
      retries: 2

volumes:
  postgres-data:

  redis-data:

configs:
  authentik-setup.yaml:
    content: |
      version: 1
      metadata:
        name: "Setup"
        labels:
          blueprints.goauthentik.io/description: "Setup"
          blueprints.goauthentik.io/instantiate: "true"
      entries:
        # Apply "Default - Events Transport & Rules" blueprint
        - model: "authentik_blueprints.metaapplyblueprint"
          attrs:
            identifiers:
              name: "Default - Events Transport & Rules"
            required: true
        # Apply "Default - Authentication flow" blueprint
        - model: "authentik_blueprints.metaapplyblueprint"
          attrs:
            identifiers:
              name: "Default - Authentication flow"
            required: true
        # Apply "Default - Provider authorization flow (explicit consent)" blueprint
        - model: "authentik_blueprints.metaapplyblueprint"
          attrs:
            identifiers:
              name: "Default - Provider authorization flow (explicit consent)"
            required: true
        # Apply "System - OAuth2 Provider - Scopes" blueprint
        - model: "authentik_blueprints.metaapplyblueprint"
          attrs:
            identifiers:
              name: "System - OAuth2 Provider - Scopes"
            required: true
        # WebApp provider
        - id: "webapp-provider"
          identifiers:
            name: "WebApp"
          model: "authentik_providers_oauth2.oauth2provider"
          attrs:
            name: "WebApp"
            authentication_flow: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
            authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-explicit-consent]]
            client_type: "confidential"
            client_id: "webapp"
            client_secret: "ourclientbythesewordsguarded"
            signing_key: !Find [authentik_crypto.certificatekeypair, [name, authentik Self-signed Certificate]]
            redirect_uris: |-
              https://webapp.localhost/login/callback
              http://localhost:3000/login/callback
            access_code_validity: "minutes=1"
            access_token_validity: "minutes=5"
            refresh_token_validity: "days=30"
            property_mappings:
              - !Find [authentik_providers_oauth2.scopemapping, [managed, goauthentik.io/providers/oauth2/scope-openid]]
              - !Find [authentik_providers_oauth2.scopemapping, [managed, goauthentik.io/providers/oauth2/scope-email]]
              - !Find [authentik_providers_oauth2.scopemapping, [managed, goauthentik.io/providers/oauth2/scope-profile]]
            sub_mode: "hashed_user_id"
            include_claims_in_id_token: true
            issuer_mode: "per_provider"
        # WebApp application
        - id: "webapp-application"
          identifiers:
            name: "WebApp"
          model: "authentik_core.application"
          attrs:
            name: "WebApp"
            slug: "webapp"
            provider: !KeyOf webapp-provider
            policy_engine_mode: "any"
        # Groups
        - id: "editor-group"
          identifiers:
            name: "editor"
          model: "authentik_core.group"
          attrs:
            name: "editor"
        # Users
        - id: "alice-user"
          identifiers:
            username: "alice"
          model: "authentik_core.user"
          attrs:
            username: "alice"
            name: "Alice Williams"
            email: "alice@webapp.localhost"
            password: "password"
            is_active: true
            path: "users"
            groups:
              - !Find [authentik_core.group, [name, editor]]
        - id: "bob-user"
          identifiers:
            username: "bob"
          model: "authentik_core.user"
          attrs:
            username: "bob"
            name: "Bob Roberts"
            email: "bob@webapp.localhost"
            password: "password"
            is_active: true
            path: "users"

  postgres-webapp.sql:
    content: |
      CREATE USER webapp PASSWORD 'password';
      CREATE DATABASE webapp WITH OWNER = webapp ENCODING = 'UTF8' TABLESPACE = pg_default;
      GRANT ALL PRIVILEGES ON DATABASE webapp TO webapp;
      CREATE DATABASE webapp_shadow WITH OWNER = webapp ENCODING = 'UTF8' TABLESPACE = pg_default;
      GRANT ALL PRIVILEGES ON DATABASE webapp_shadow TO webapp;

  postgres-authentik.sql:
    content: |
      CREATE USER authentik PASSWORD 'password';
      CREATE DATABASE authentik WITH OWNER = authentik ENCODING = 'UTF8' TABLESPACE = pg_default;
      GRANT ALL PRIVILEGES ON DATABASE authentik TO authentik;

  redis-redis.conf:
    content: |
      bind 0.0.0.0
      loglevel warning
      save 60 1
      appendonly yes
      appendfsync everysec
      auto-aof-rewrite-min-size 16mb
      auto-aof-rewrite-percentage 100
      dir /data/
      user default on ~* &* +@all -@admin >password

networks:
  public:
    internal: false

  private:
    internal: true
